







=========================2=========================
 

说明以下3个if语句的区别：

（1）if (i > 0):
		if (j > 0): 
			n = 1
		else: 
			n =2

（2）if (i > 0):
        if (j > 0):
			n = 1
     else: 
		n = 2

（3）if (i > 0): 
		n = 1
	else:
        if (j > 0):
			n = 2






利用循环结构，使用turtle库的turtle.circle()函数和turtle.seth()函数绘制套圈，最小的圆圈半径为10像素，不同圆圈之间的半径差是40像素。程序运行效果如图所示。

import turtle
r =10
head = 90
for i  in range (4):
   turtle.seth(head)
   turtle.circle(r) 
   r = r + 40
turtle.done()




 

编写程序，输入两个整数a和b，利用“更相减损法”求这两个整数的最大公约数和最小公倍数。


参考答案

a=m=int(input("请输入整数m："))
b=n=int(input("请输入整数n："))
while(m!=n):
	if (m > n): 
		m=m-n
	else: 
		n=n-m
print(“最大公约数：%d”, m)
print(“最小公倍数：%d”, a*b//m)



说明：
（1）“更相减损法”出自于中国古代的《九章算术》，也是一种求最大公约数的算法，具体算法如下：
①先判断两个正整数的大小，如果两数相等，则这个数本身就是所求的最大公约数。
②如果两个正整数不相等，则用大数减去小数，然后用这个较小数与它们相减的结果相比较，如果相等，则这个差就是两个正整数的最大公约数，而如果不相等，则继续执行②操作。
（2）求得了最大公约数后，最小公倍数就是已知的两个正整数之积除以最大公约数的商。



 
 

=========================3=========================

编写程序，分别定义求两个整数最大公约数的函数GCD和求最小公倍数的函数LCM，并编写测试代码，要求从键盘接收两个整数进行测试，程序运行结果如图所示。请使用递归方式实现。

参考答案

	#递归方法求解m和n的最大公约数。GCD(m, n) = GCD(n, m Mod n)

	def gcd(m, n): #使用递归函数计算p和q的最大公约数

	   if n == 0: 
		return m   #如果n=0，返回m

	   return gcd(n, m % n) #否则，递归调用gcd(n, m % n)




	def lcm(m,n):

	   return m*n//gcd(m,n)

	if __name__ == '__main__':

	   a=int(input("请输入第一个整数："))

	   b=int(input("请输入第二个整数："))

	   print(gcd(a,b),lcm(a,b))
	   
	   



 
按照下列要求，设计完成一个Python程序。具体要求如下：
1.编写函数get_birthday,参数为身份证号码，根据身份证号码获得这个人的生日，并返回列表[year,month,day]。
2. 主程序中调用函数get_birthday，给出列表对象['310101199005052115', '310104199607076128','310117199309235133']中的 身份证号码的生日。并在主程序中显示并输出。

参考答案

#定义函数2分
def get_birthday(idcard):  
	#取出年月日 1分
    birth_year = int(idcard[6:10])          
    birth_month = int(idcard[10:12])
    birth_day = int(idcard[12:14])
    """通过身份证号获取出生日期"""
    return [birth_year , birth_month, birth_day ] #返回列表1分

#定义列表1分
L=['310101199005052115', '310104199607076128','310117199309235133'] 

for idcard in L:                             
    birthday = get_birthday(idcard)  #for 循环中进行函数调用 1分  
	
#输出1分格式正确1分	
print("%s的生日为：%d-%d-%d" % (idcard,birthday[0] ,birthday[1] , birthday[2] )) 
	   


按照下列要求，设计完成一个Python程序。具体要求如下：
1.程序功能：计算某地区月最大降水量和对应降水月份。
2.文本文件rainfall.txt存放着某些地区某年降水量的数据，每行为一个地区12个月的降水量（单位：mm），数据间的分隔符为制表符。内容如下：
地区1月2月3月4月5月6月7月8月9月10月11月12月
上海5220104601991671582111492214
北京027546691961201161003
天津0041360115216199514440
喀什1024134613503
西安41433222207124246480
重庆3021212711822516751771014639
广州4271781047121927531616830565
韶关67140115136134470128120171282230
海口3614633719827325227219031312519
3.编写函数getMaxPos(L), 形参L为一组含有数值型数据的列表（某地区各月份的降水量），计算列表中数据的最大值和对应下标，并将最大值和下标以元组形式（作为元组的两个元素）返回。
4.主程序读取rainfall.txt内的数据，将每行数据中的月降水量转为数值型数据，利用函数getMaxPos(L)计算并屏幕输出各地区月最大降水量（显示宽度8位）和对应降水月份（显示宽度6位），各数据间以制表符相隔。 


参考答案
def getMaxPos(L):
    maxN,maxPos=L[0],0
    for i in range(1,len(L)): 
        if L[i]>maxN:
            maxN=L[i]
            maxPos=i       
    return (maxN,maxPos)
data=list(open("rainfall.txt"))  #或其它方法
print ("地区\t最大月降水量(mm)\t对应降水月份")
del data[0]          #或其它方法
for area in data:
    line=area.split()
    for i in range(1,len(line)):
        line[i]=int(line[i])
    maxN,pos=getMaxPos(line[1:])
    print ("%s\t%8d\t%6d月"%(line[0],maxN,pos+1))





=========================4=========================

主程序中已有一个排好序的列表，请编写函数insertList，将从键盘接收的整数按原来从小到大的排序规律插入到该列表中。



def insertList(L1,x):
#函数代码

L1=[1,4,6,9,13,16,28,40,100]
x=int(input('请输入一个要插入的整数：'))
insertList(L1,x)
print(L1)

参考答案

def insertList(L1,x):
    if x>L1[len(L1)-1]:
        L1.append(x)
        return
    for i in range(0,len(L1)):
        if x<L1[i]:
            L1.insert(i,x)
            break
    return

L1=[1,4,6,9,13,16,28,40,100]
x=int(input('请输入一个要插入的整数：'))
insertList(L1,x)
print(L1)



 

阅读下面Python语句，请问输出结果是什么？
d = {1:'a', 2:'b', 3:'c'};
del d[1];d[1] = 'x';del d[2];print(d)

参考答案

{1: 'x', 3: 'c'}




 
一棵二叉树共有25个节点，其中5个是节子结点，则度为1的节点数有多少个？
参考答案
16。分析：根据二叉树的基本性质，在任意一棵二叉树中，度为0的结点(叶子结点)总是比度为2的结点多一个。本题中度为2的结点即为4个。二叉树只包含度为0的结点、度为1的结点和度为2的结点。度为1的结点个数等于总结点数减去度为0和2的结点数。25-5-4=16。
知识点
数据结构



=========================5=========================

 

假设当前目录下有一个文件名为score1.txt的文本文件，存放着某班学生的计算机课程成绩，共有学生学号、平时成绩和期末成绩三列，每一行数据之间采用空格分隔。请编写程序完成下列要求：
（1）根据平时成绩占40%、期末成绩占60%的比例计算总评成绩（取整数），并将每个学生的学号和总评成绩写入另一个文件score2.txt中，每个学生的数据占据一行。
（2）在屏幕上输出本班学生总人数。
（3）根据总评成绩，统计并输出90以上、80～89、70～79、60～69、60分以下各成绩档学生的人数，并输出班级总平均分（取整数）。


参考答案

scores = []         #创建空列表，用于储存每个学生的学号和总评成绩信息

s9,s8,s7,s6,s5 = 0,0,0,0,0 #初始化各分数段人数

count, total = 0, 0     #初始化总人数和总分数

txtfilepath = 'score1.txt'

with open(txtfilepath, encoding='utf-8') as f: #打开输入文件（学号、平时成绩和期末成绩）

  lines = f.readlines()  #读取所有的行

  del lines[0]      #删除标题行（第1行，即学号、平时成绩和期末成绩的标题信息）

  for line in lines:   #读取并遍历文件行（每个学生的学号、平时成绩和期末成绩信息）

    rawscore = line.split() #拆分各个数据项（学号、平时成绩和期末成绩信息）

    avg = round(int(rawscore[1]) * 0.4 + int(rawscore[2])*0.6,0) #计算总评成绩

    scores.append([rawscore[0],avg]) #将每个学生的学号和总评成绩添加到scores列表

result_filepath = 'results.txt' #储存每个学生的学号和总评成绩的输出文件

with open(result_filepath,'w', encoding='utf-8') as f: #打开输出文件

  f.write("学号 总评成绩\n")

  for score in scores:

    if score[1] >= 90:  #>=90

      s9 += 1

    elif score[1] >= 80: #80~89

      s8 += 1

    elif score[1] >= 70: #70~79

      s7 += 1

    elif score[1] >= 60: #60~69

      s6 += 1

    else:        #60分以下

      s5 += 1 

    count += 1     #总人数加1

    total += score[1]  #总分数累加

    f.write(f"{score[0]} {score[1]}\n") #将每个学生的学号和总评成绩写入输出文件

avg_score=round(total / count, 0) #班级总平均分（按总评成绩统计）

print(f"学生总人数为{count}。按总评成绩统计各成绩档学生的人数：")

print(f"90以上{s9}人、80～89有{s8}人、70～79有{s7}人、60～69有{s6}人、60分以下{s5}人。")

print(f"班级总平均分为{avg_score}分。")





=========================6=========================

 

请编写程序，生成随机密码。具体要求如下：
    (1)使用random库，采用0x1010作为随机数种子。
    (2)密码由26个字母大小写、10个数字字符和!@#$%^&*等8个特殊符号组成。
    (3)每个密码长度固定为10个字符。
    (4)程序运行每次产生10个密码，每个密码一行。
    (5)每次产生的10个密码首字符不能一样。
    (6)程序运行后产生的密码保存在“随机密码.txt”文件中。


参考答案

import random
random.seed(0x1010)
s="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890! @#$%^&*"
ls=[]
excludes=" "
while len(ls)<10:
    pwd=" "
    for i in range(10):
        pwd+=s[random.randint(0,len(s)-1)]
        if pwd[0] in excludes:
            continue
    ls.append(pwd)
    excludes+=pwd[0]
fo=open("随机密码.txt","w")
fo.write("\n".join(ls))
fo.close()

解析

本题考核随机数及文本操作能力。
    本题目涉及产生10个随机密码，但要求随机密码首位不能相同，可以考虑随机生成密码并判断是否首位已经存在，如果存在则再次生成密码。因此，这种模式无法确定循环产生密码的总次数，程序框架应采用while语句实现。
    题目规定了密码采用的字符信息，共44个，含字母、数字和特殊符号，可以将这些字符组织成字符串，便于后续根据其中字符生成密码。
    程序主体逻辑包括：生成一个10字符长度密码，判断首位是否在已生成密码首位组成的排除字符串excludes中，如果存在，则再次生成密码，否则将生成密码的首位加入排除字符串excludes中。所生成密码存储在列表变量ls中，每个密码为列表中一个元素。最后，将密码输出到文件。
    
    
    
    
=========================7=========================    

比较字符串：提示用户输入两个字符串，将其进行比较，输出较小的字符串，要求只能使用单字符比较操作。
参考答案

s1 = input("请输入第一个字符串：")
s2 = input("请输入第二个字符串：")

if len(s1) < len(s2):
    print("第一个字符串较小。")
elif len(s1) > len(s2):
    print("第二个字符串较小。")
else:
    for i in range(0,len(s1)):
        if s1[i] < s2[i]:
            print("第一个字符串较小。")
            break
        elif s1[i] > s2[i]:
            print("第二个字符串较小。")
            break
    else:
        print("两个字符串相等。")
        
        

 

阅读下面Python语句，请问输出结果是什么？

s1 ="QQ"
s2 ="Wechat"
print("{:*<10}{:=>10}".format(s1,s2))

参考答案

QQ********====Wechat










=========================8=========================

设计一个Course（课程）类，该类中包括number（编号）、name（名称）、teacher（任课教师）、location（上课地点）共4个属性，其中location是私有属性；还包括__init__()、show_info()（显示课程信息）共两个方法。设计完成后，创建Course类的对象显示课程的信息。

参考代码：
class Course:
    def __init__(self):
        self.number = 1001
        self.name = "语文"
        self.teacher = "张老师"
        self.__location = "2号教学楼3层305室"

    def show_info(self):
        return ("""
            课程编号：%d
            课程名称：%s
            任课教师：%s
            上课地点：%s
        """ % (self.number, self.name, self.teacher, self.__location))
course = Course()
print(course.show_info())





=========================9=========================

 

（1）简述Python模块的导入操作（3分）。
Python包含了数量众多的模块，通过import语句，可以导入模块，并使用其定义的功能。
Python中假设有模块m，如果希望同时导入m中的所有成员，则可以采用from m import *的导入形式。
Python中使用内置函数__import__()也可以导入模块。



（2）简述Python模块名称和定义成员的查询操作（2分）。
Python模块中定义的所有成员，包括变量、函数和类，可以通过内置的函数dir()查询，也可以通过help()函数查询其帮助信息。
Python中每个模块都有一个名称，通过特殊变量__name__可以获取模块的名称。特别地，当一个模块被用户单独运行时，模块名称为__main__。







